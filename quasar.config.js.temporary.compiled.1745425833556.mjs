/* eslint-disable */
/**
 * THIS FILE IS GENERATED AUTOMATICALLY.
 * 1. DO NOT edit this file directly as it won't do anything.
 * 2. EDIT the original quasar.config file INSTEAD.
 * 3. DO NOT git commit this file. It should be ignored.
 *
 * This file is still here because there was an error in
 * the original quasar.config file and this allows you to
 * investigate the Node.js stack error.
 *
 * After you fix the original file, this file will be
 * deleted automatically.
 **/


// quasar.config.js
import { defineConfig } from "@quasar/app-vite/wrappers";
import { fileURLToPath } from "node:url";
import { VitePWA } from "vite-plugin-pwa";
import quasar from "@quasar/vite-plugin";
var __quasar_inject_import_meta_url__ = "file:///home/daniel/git/asocial-app/quasar.config.js";
var quasar_config_default = defineConfig((ctx) => {
  return {
    plugins: [
      VitePWA({
        registerType: "autoUpdate"
      })
    ],
    // https://v2.quasar.dev/quasar-cli-webpack/supporting-ts
    supportTS: false,
    // https://v2.quasar.dev/quasar-cli-webpack/prefetch-feature
    // preFetch: true,
    // app boot file (/src/boot)
    // --> boot files are part of "main.js"
    // https://v2.quasar.dev/quasar-cli-webpack/boot-files
    boot: ["axios", "appconfig", "i18n"],
    // https://v2.quasar.dev/quasar-cli-webpack/quasar-config-js#Property%3A-css
    css: [
      "app.sass"
    ],
    // https://github.com/quasarframework/quasar/tree/dev/extras
    extras: [
      // 'ionicons-v4',
      // 'mdi-v5',
      // 'fontawesome-v6',
      // 'eva-icons',
      // 'themify',
      // 'line-awesome',
      // 'roboto-font-latin-ext', // this or either 'roboto-font', NEVER both!
      "roboto-font",
      // optional, you are not bound to it
      "material-icons"
      // optional, you are not bound to it
    ],
    // Full list of options: https://v2.quasar.dev/quasar-cli-webpack/quasar-config-js#Property%3A-build
    build: {
      target: {
        browser: ["es2022", "firefox115", "chrome115", "safari14"],
        node: "node20"
      },
      // this is a configuration passed on
      // to the underlying Webpack
      // devtool: 'source-map',
      vueRouterMode: "hash",
      // available values: 'hash', 'history'
      // transpile: false,
      // publicPath: '/',
      // Add dependencies for transpiling with Babel (Array of string/regex)
      // (from node_modules, which are by default not transpiled).
      // Applies only if "transpile" is set to true.
      // transpileDependencies: [],
      // rtl: true, // https://quasar.dev/options/rtl-support
      // preloadChunks: true,
      // showProgress: false,
      // gzip: true,
      // analyze: true,
      // Options below are automatically set depending on the env, set them if you want to override
      // extractCSS: false,
      viteVuePluginOptions: {
        build: {
          assetsInlineLimit: 64e3
        }
      },
      vitePlugins: [
        ["@intlify/unplugin-vue-i18n/vite", {
          // if you want to use Vue I18n Legacy API, you need to set `compositionOnly: false`
          // compositionOnly: false,
          // if you want to use named tokens in your Vue I18n messages, such as 'Hello {name}',
          // you need to set `runtimeOnly: false`
          // runtimeOnly: false,
          ssr: ctx.modeName === "ssr",
          // you need to set i18n resource including paths !
          include: [fileURLToPath(new URL("./src/i18n", __quasar_inject_import_meta_url__))]
        }]
      ]
      // https://v2.quasar.dev/quasar-cli-webpack/handling-webpack
      // "chain" is a webpack-chain object https://github.com/neutrinojs/webpack-chain
      // watchOptions: {
      // ignored: '**/node_modules',
      // },
      /*
      extendWebpack (cfg) {
        cfg.module.rules.push({ test: /\.md$/i, type: 'asset/source' })
        cfg.module.rules.push({ test: /\.txt$/i, type: 'asset/source' })
        cfg.module.rules.push({ test: /\.bin$/i, type: 'asset/inline' })
      },
      chainWebpack: chain => {
        chain.module
          .rule('i18n-resource')
          .test(/\.(json5?|ya?ml)$/)
          .include.add(path.resolve(__dirname, './src/i18n'))
          .end()
          .type('javascript/auto')
          .use('i18n-resource')
          .loader('@intlify/vue-i18n-loader')
        chain.module
          .rule('i18n')
          .resourceQuery(/blockType=i18n/)
          .type('javascript/auto')
          .use('i18n')
          .loader('@intlify/vue-i18n-loader')
      }
      */
    },
    // Full list of options: https://v2.quasar.dev/quasar-cli-webpack/quasar-config-js#Property%3A-devServer
    devServer: {
      // https: true,
      port: 8081,
      host: "localhost",
      open: false
      // opens browser window automatically
    },
    // https://v2.quasar.dev/quasar-cli-webpack/quasar-config-js#Property%3A-framework
    framework: {
      config: {
        brand: {
          msgbg: "#010101",
          msgtc: "#FFFF08",
          tbptc: "#82C8E8",
          tbstc: "#82C8E8",
          btnbg: "#1976D2",
          btntc: "#000000",
          btwbg: "#E65100",
          btwtc: "#000000",
          mdtitre: "#64B5F6"
        }
      },
      // iconSet: 'material-icons', // Quasar icon set
      // lang: 'en-US', // Quasar language pack
      // For special cases outside of where the auto-import strategy can have an impact
      // (like functional components as one of the examples),
      // you can manually specify Quasar components/directives to be available everywhere:
      //
      // components: [],
      // directives: [],
      // Quasar plugins
      plugins: ["Dialog"]
    },
    // animations: 'all', // --- includes all animations
    // https://quasar.dev/options/animations
    animations: "all",
    // https://v2.quasar.dev/quasar-cli-webpack/developing-pwa/configuring-pwa
    pwa: {
      workboxMode: "InjectManifest",
      // 'GenerateSW' or 'InjectManifest'
      workboxPluginMode: "InjectManifest"
      // swFilename: 'sw.js',
      // manifestFilename: 'manifest.json',
      // extendManifestJson (json) {},
      // useCredentialsForManifestTag: true,
      // injectPwaMetaTags: false,
      // extendPWACustomSWConf (esbuildConf) {},
      // extendGenerateSWOptions (cfg) {},
      // extendInjectManifestOptions (cfg) {}
    }
  };
});
export {
  quasar_config_default as default
};
